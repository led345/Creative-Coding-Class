//Edit of code from Class 3 and 4

float r1 = 0.;
float r2 = 0.;
float r3 = 0.;

import ddf.minim.*; // import an external library

// audio stuff
Minim minim; // this is the audio engine
AudioInput in; // this is the audio input
float theamp; // this is how loud i'm being

int NUMPOINTS = 50;
float r = 0.;
float scroll = 0.;

PShape s; // this is my cool shape
PImage img; // this is my cool image
  
void setup()
{
  size(800, 800, OPENGL);
  
  img = loadImage("titanfall.jpg");
  textureMode(NORMAL); // express uvw in normal coordinates (0-1)
  textureWrap(REPEAT); // make the texture wrap
  // audio shit
  minim = new Minim(this); // this starts the audio engine
  in = minim.getLineIn();
  
  fillShape();
}


void draw()
{
    
  doaudiostuff();
  background(0);
  //image(img, 0, 0, width, height);
  lights();
  fill(240,110,125);
    noStroke();
   translate(mouseX, mouseY);
    sphereDetail(30);
    sphere(100);
  
   r3 = r3 + 0.275;
//       pushMatrix(); // go up one level
//       rotate(r3, 1, 0, 0); // spin around the x axis
       //translate(50, 0); 
     
  fillShape();
  
 // popMatrix();
    
   // float samp = map(theamp, 0., 1., 1., 20);

  rotate(r, -0.235, 0.8143, 0.951);
  //translate(mouseX, mouseY);
  pushMatrix();
  translate(300, 0);
  //rotate(r, 1., 0., 0.);
  scale(theamp*1.0+0.05);
  shape(s, 0, 0);
  //sphere(50);
  popMatrix();
  r= r+theamp;
  scroll = scroll+0.1;
}

void fillShape()
{
 
  s = createShape();
  s.beginShape();
  s.texture(img);
  fill(244,255,59);
  
   for(int i = 0;i<NUMPOINTS;i++)
   {
      for(int j = 0;j<NUMPOINTS;j++)
     {
      
       float u = map(i, 0, NUMPOINTS, -PI, PI);
       float v = map(j, 0, NUMPOINTS, -PI, PI);
       float x = 2.0*sin(3.0*u) / (2.0 + cos(v));
       float y = 2.0*(sin(u) + 2.0*sin(2*u)) / (2.0 + cos(v + 2.0*PI / 3.0));
       float z = (cos(u) - 2.0*cos(2.0*u))*(2.0 + cos(v))*(2.0 + cos(v + 2.0*PI / 3.0)) / 4.0;       
      
       s.vertex(x*width+width, y*width+width, z*width+width, (float(i*10)/NUMPOINTS)+scroll, (float(j*10)/NUMPOINTS)+scroll);
       
     } 
   }
   
     s.endShape(CLOSE);

}

void doaudiostuff()
{
  float rawamp = 0.;

  for (int i = 0; i < in.bufferSize () - 1; i++)
    {
    rawamp = rawamp + abs(in.left.get(i)); // add the abs value of the current sample to the amp
  }
  rawamp = rawamp / in.bufferSize();

  theamp = mysmooth(rawamp, theamp, 0.9);

}

// y(n) = a*y(n-1) + (1.0-a)*x(n)
float mysmooth(float x, float y, float a)
{
  return(a*y + (1.0-a)*x);
}
